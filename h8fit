#include<stdio.h>
#include<stdlib.h>
void accept(int a[],int n)
{
    int i;
    for(i=0; i<n; i++)
        scanf("%d",&a[i]);
}
void sort(int a[],int n)
{
    int i,j,temp;
    for(i=0; i<n; i++)
    {
        for(j=0; j<n-1; j++)
        {
            if(a[j]>a[j+1])
            {
                temp=a[j];
                a[j]=a[j+1];
                a[j+1]=temp;
            }
        }
    }
}
void firstfit(int psize[],int np,int msize[],int nm)
{
    int i,j,flag[nm],in=0,ex=0;
    for(i=0; i<nm; i++)
        flag[i]=0;
    for(i=0; i<np; i++)
    {
        for(j=0; j<nm; j++)
        {
            if(flag[j]==0 && msize[j]>=psize[i])
            {
                flag[j]=1;
                in+=msize[j]-psize[i];
                printf("\nprocess %d (size %d) is allocated %d size memory hole",i,psize[i],msize[j]);
                break;
            }
        }
        if(j==nm)
            printf("\nprocess %d cannot be allocated memory",i);

    }
    for(i=0; i<nm; i++)
        if(flag[i]==0)
            ex+=msize[i];


    printf("\ninternal fragmentation %d",in);
    printf("\nexternal fragmentation %d",ex);

}
void bestfit(int psize[],int np,int msize[],int nm)
{
    int i,j,temp[nm],flag[nm],in=0,ex=0;
    for(i=0; i<nm; i++)
    {
        temp[i]=msize[i];
        flag[i]=0;
    }
    sort(temp,nm);
    for(i=0; i<np; i++)
    {
        for(j=0; j<nm; j++)
        {
            if(flag[j]==0 && temp[j]>=psize[i])
            {
                flag[j]=1;
                in+=msize[j]-psize[i];
                printf("\nprocess %d (size %d) is allocated %d size memory hole",i,psize[i],temp[j]);
                break;
            }
        }
        if(j==nm)
            printf("\nprocess %d cannot be allocated memory",i);
    }
    for(i=0; i<nm; i++)
        if(flag[i]==0)
            ex+=msize[i];
    printf("\ninternal fragmentation %d",in);
    printf("\nexternal fragmentation %d",ex);
}

void worstfit(int psize[],int np,int msize[],int nm)
{
    int i,j,temp[nm],flag[nm],in=0,ex=0;
    for(i=0; i<nm; i++)
    {
        temp[i]=msize[i];
        flag[i]=0;
    }
    sort(temp,nm);
    for(i=0; i<np; i++)
    {
        for(j=nm-1; j>=0; j--)
        {
            if(flag[j]==0 && temp[j]>=psize[i])
            {
                flag[j]=1;
                in+=msize[j]-psize[i];
                printf("\nprocess %d (size %d) is allocated %d size memory hole",i,psize[i],temp[j]);
                break;
            }
        }
         if(j==nm)
            printf("\nprocess %d cannot be allocated memory",i);
    }
    for(i=0; i<nm; i++)
        if(flag[i]==0)
            ex+=msize[i];
    printf("\ninternal fragmentation %d",in);
    printf("\nexternal fragmentation %d",ex);
}
main()
{
    int psize[30],np,msize[30],nm,ch;
    printf("enter the no of processes:");
    scanf("%d",&np);
    printf("enter process size:");
    accept(psize,np);
    printf("enter the no of memory holes:");
    scanf("%d",&nm);
    printf("enter mem hole size:");
    accept(msize,nm);
    printf("1)first fit 2)bestfit 3)worstfit 4)exit");
    while(1)
    {
     printf("\nenter your choice");
     scanf("%d",&ch);
     switch(ch)
     {
         case 1:firstfit(psize,np,msize,nm); break;
         case 2:bestfit(psize,np,msize,nm); break;
         case 3:worstfit(psize,np,msize,nm); break;
         case 4:exit(0);
    }
    }
    return 0;
}
